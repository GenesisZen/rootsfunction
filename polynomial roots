import math
from typing import list

def polynomial_roots(coefficients: List[float], roots: List[float]) -> List[float]:
    '''Returns a sorted list of length two with the roots (rounded to one decimal place) of the polynomial represented by coefficients. Particularly, given the coefficients of a nth degree polynomial (stored in the list coefficients) and n -2 roots of that polynomial (stored in the list roots), the function polynomial_roots returns the other two roots.
    >>>[1.0, 1.0]
    >>>polynomial_roots([15.0, 1.0, -52.0, 20.0, 16.0], [1.0, -2.0])
    >>>[1.3, -0.4]
    '''
    q = np.poly(roots)
    p, r = np.polynomial.polynomial.polydiv(coefficients, q)
    return [round(x, 1) for x in np.roots(p)]  
    
    #Here is what I did before if it helps.
    
 def square_root(coefficients: List[float]) -> List[float]:
    ''' Return a sorted list with the two square roots (can be duplicates) of the second degree polynomial represented by coefficients. Please note that the list must be sorted in decreasing order and the values of the list must be rounded to one decimal place.
    
    >>>square_root([1.0, -2.0, 1.0])
    [1.0, 1.0]
    >>>square_root([15.0, -14.0, -8.0])
    [1.3, -0.4]
    ''' 
    #Assign coefficients, from 0 to 2, to a, b, and c respectively.
    a = coefficients[0]
    b = coefficients[1]
    c = coefficients[2]
    
    d = b**2 - 4*a*c #Calculate the discriminant.
    
    #Calculate the first and second roots, which are lifted from the quadratic formula.
    root1 = ((-b - math.sqrt(d))/(2 * a))
    root2 = ((-b + math.sqrt(d))/(2 * a))
    
    #Round root1 and root2 to 1 decimal value, and then put them in a list.
    roots = [round(root1, 1), round(root2, 1)]
    roots.sort(reverse = True) #Sort the list from decreasing order.
    
    return(roots)    
